<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.modu.mapper.MemberMapper">
	
		<insert id="insertMember" parameterType="Member">
		insert into MEMBER(EMAIL,
							PWD,
							NICKNAME,
							PROFILE_IMG,
							NAME,
							PHONE,
							MARKETING,
							API_USING,
							SIGNUP_DATE,
							UPDATE_DATE) values(#{email},
												#{pwd},
												#{nickname},
												'default_profile_img.png',
												#{name, jdbcType=VARCHAR},
												#{phone, jdbcType=VARCHAR},
												#{marketing},
												1,
												SYSDATE,
												SYSDATE)
	</insert>
	
	<!-- 내정보수정 진입시 내정보 불러오기 -->
	<select id="selectMember" parameterType="String"
		resultType="Member">
		select * from MEMBER where EMAIL=#{email}
	</select>
	<!-- 회원탈퇴 -->
	<delete id="deleteMember" parameterType="String">
		delete from MEMBER where EMAIL=#{email}
	</delete>

	<!-- 아직 미사용 중 -->
	<select id="selectEmailCheck" parameterType="String"
		resultType="String">
		select EMAIL from MEMBER where EMAIL=#{email}
	</select>
	<select id="selectNicknameCheck" parameterType="String"
		resultType="String">
		select NICKNAME from MEMBER where NICKNAME=#{nickname}
	</select>
	<select id="selectNickname" parameterType="String"
		resultType="String">
		select NICKNAME from MEMBER where EMAIL=#{email}
	</select>
	<select id="selectProfileImg" parameterType="String"
		resultType="String">
		select PROFILE_IMG from MEMBER where EMAIL=#{email}
	</select>
	
	<update id="updatePoint">
		update MEMBER set POINT=POINT+#{point} where
		EMAIL=#{email}
	</update>
	<select id="selectPoint" parameterType="String" resultType="int">
		select POINT from MEMBER where EMAIL=#{email}
	</select>
	
	<!-- 마이페이지 탭5 - 친구관리 -->
	<insert id="insertFollowing">
		insert into FOLLOW values(FOLLOW_SEQ.nextval,
									#{my_email},
									#{following_email},
									SYSDATE)
	</insert>
	<delete id="deleteFollow" parameterType="long">
		delete from FOLLOW where ID=#{id}
	</delete>
	<delete id="deleteFollower" parameterType="long">
		delete from FOLLOW where ID=#{id}
	</delete>
	
	<!-- 내 이메일이 구독하는 친구의 정보-->
	<select id="selectFollowing" resultType="FollowList">
		select * from (select ROWNUM list,
							  f.ID ID,
							  f.FOLLOWEE EMAIL,
							  m.NICKNAME NICKNAME,
							  m.PROFILE_IMG PROFILE_IMG,
							  f.FOLLOW_DATE FOLLOW_DATE
					   from MEMBER m inner join FOLLOW f on m.EMAIL=f.FOLLOWEE
					   where M_EMAIL=#{email})
		where list BETWEEN #{beginRow} AND #{endRow}
		order by ID desc
	</select>
	<!-- 내 이메일을 구독하는 친구의 정보 -->
	<select id="selectFollower" resultType="FollowList">
		select * from (select
							ROWNUM list,
							f.ID,
							f.M_EMAIL EMAIL,
							m.NICKNAME,
							m.PROFILE_IMG,
							f.FOLLOW_DATE
					   from MEMBER m inner join FOLLOW f on m.EMAIL=f.M_EMAIL
					   where f.FOLLOWEE=#{email} order by f.ID desc)
	  	where list BETWEEN #{beginRow} AND #{endRow}
		order by ID desc
	</select>

	<!-- 테스트용 -->
	<select id="selectEmails" parameterType="int"
		resultType="String">
		<![CDATA[select EMAIL from  (select ROWNUM no, EMAIL from MEMBER 
                		    where AUTHORITY=1 and NICKNAME NOT LIKE '%닉네임%'
               				order by DBMS_RANDOM.RANDOM) 
	    where ROWNUM<#{bound}]]>
	</select>

	<!-- 랭킹으로 회원 뽑기 -->
	<select id="selectMemberRank" resultType="Member">
		<![CDATA[select * from (select * from MEMBER order by POINT desc) where ROWNUM <= 6]]>
	</select>

	<!-- 회원가입시 이메일 중복검사 -->
	<select id="emailCheck" resultType="int">
		select count(*) from MEMBER where email = #{email}
	</select>
	<!-- 회원가입시 닉네임 중복검사 -->
	<select id="nicknameCheck" resultType="int">
		select count(*) from MEMBER where nickname = #{nickname}
	</select>

	<!-- 로그인 post -->
	<select id="login" resultType="Member">
		select EMAIL, NICKNAME, PROFILE_IMG from MEMBER where EMAIL=#{email} and pwd=#{pwd}
	</select>
	<!-- 내정보수정 post1 (프로필사진 제외) -->
	<update id="updateMember" parameterType="Member">
		update MEMBER set PWD = #{pwd},
						  NICKNAME = #{nickname},
						  NAME = #{name, jdbcType=VARCHAR},
						  PHONE = #{phone, jdbcType=VARCHAR},
						  MARKETING = #{marketing},
						  UPDATE_DATE = SYSDATE 
						  where EMAIL = #{email}						
	</update>
	<!-- 내정보수정 post2 (프로필사진 포함) -->
	<update id="updateMember2" parameterType="Member">
		update MEMBER set PWD=#{pwd},
						  NICKNAME=#{nickname},
						  NAME = #{name, jdbcType=VARCHAR},
						  PHONE= #{phone, jdbcType=VARCHAR},
						  PROFILE_IMG = #{profileImg},
						  PROFILE_IMG_ORG = #{profileImgOrg},
						  PROFILE_IMG_SIZE = #{profileImgSize},
						  MARKETING = #{marketing},
						  UPDATE_DATE = SYSDATE 
						  where EMAIL = #{email}						
	</update>	
	<!-- 내정보수정 - 프로필사진만 삭제시 기본 default 사진으로 update -->
	<update id="deleteProfileImg" parameterType="String">
		update MEMBER set PROFILE_IMG = 'default_profile_img.png', 
						  PROFILE_IMG_ORG = 'default_profile_img.png'
						  where EMAIL = #{email}
	</update>


	<!-- 오유현 추가 -->
	<select id="selectFollowingCount" parameterType="String" resultType="int">
		select NVL(MAX(ROWNUM),0) from FOLLOW where M_EMAIL=#{email}
	
	</select>
	<select id="selectFollowerCount" parameterType="String" resultType="int">
		select NVL(MAX(ROWNUM),0) from FOLLOW where FOLLOWEE==#{email}	
	</select>
</mapper>
